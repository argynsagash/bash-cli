import java.io.File;
import java.io.FileWriter;
import java.util.Scanner;

public class MyFile {

    public static boolean flag = true;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        while (flag) {
            String commandLine = scanner.nextLine();
            String[] arr = commandLine.split(" ");
//            for (int i = 0; i < arr.length; i++) {
//                System.out.println(arr[i]);
//            }

            if (arr[0].equals("exit")) exit();
            else if (arr[0].equals("ls")) listDirectory(arr[1]);
            else if (arr[0].equals("ls_py")) listPythonFiles(arr[1]);
            else if (arr[0].equals("is_dir")) isDirectory(arr[1]);
            else if (arr[0].equals("define")) define(arr[1]);
            else if (arr[0].equals("readmod")) printPermissions(arr[1]);
            else if (arr[0].equals("setmod")) setPermissions(arr[1], arr[2]);
            else if (arr[0].equals("cat")) printContent(arr[1]);
            else if (arr[0].equals("append")) appendFooter(arr[1]);
            else if (arr[0].equals("bc")) createBackup(arr[1]);
            else if (arr[0].equals("greplong")) printLongestWord(arr[1]);
            else if (arr[0].equals("help")) help();
            else System.out.println("Wrong command. Please try to write -> help for more options");
        }

    }

    // выводит список всех файлов и директорий для `path` - ls
    public static void listDirectory(String path) {
        System.out.println("listDirectory" + "->" + path);
    }

    // выводит список файлов с расширением `.py` в `path` - ls_py
    public static void listPythonFiles(String path) {
        System.out.println("listPythonFiles" + "->" + path);
    }

    // выводит `true`, если `path` это директория, в других случаях `false` - id_dir
    public static void isDirectory(String path) {
        File currentDir = new File(path);
        System.out.println(currentDir.isDirectory());
    }

    // выводит `директория` или `файл` в зависимости от типа `path` - define
    public static void define(String path) {
        System.out.println("define" + "->" + path);
    }

    // выводит права для файла в формате `rwx` для текущего пользователя - readmod
    public static void printPermissions(String path) {
        System.out.println("printPermissions" + "->" + path);
    }

    // устанавливает права для файла `path` - setmod
    public static void setPermissions(String path, String permissions) {
        System.out.println("setPermissions" + "->" + path);
    }

    // выводит контент файла - cat
    public static void printContent(String path) {
        System.out.println("printContent" + "->" + path);
    }

    // добавляет строке `# Autogenerated line` в конец `path` - append
    public static void appendFooter(String path) {
        System.out.println("appendFooter" + "->" + path);
    }

    // создает копию `path` в директорию `/tmp/${date}.backup` где, date - это дата в формате `dd-mm-yyyy`. `path`
    // может быть директорией или файлом. При директории, копируется весь контент. - bc
    public static void createBackup(String path) {
        System.out.println("createBackup" + "->" + path);
    }

    // выводит самое длинное слово в файле - greplong
    public static void printLongestWord(String path) {
        System.out.println("printLongestWord" + "->" + path);
    }

    // выводит список команд и их описание - help
    public static void help() {
        System.out.println(
                "ls <path>               выводит список всех файлов и директорий для `path`\n" +
                        "ls_py <path>            выводит список файлов с расширением `.py` в `path`\n" +
                        "is_dir <path>           выводит `true`, если `path` это директория, в других случаях `false`\n" +
                        "define <path>           выводит `директория` или `файл` в зависимости от типа `path`\n" +
                        "readmod <path>          выводит права для файла в формате `rwx` для текущего пользователя\n" +
                        "setmod <path> <perm>    устанавливает права для файла `path`\n" +
                        "cat <path>              выводит контент файла\n" +
                        "append <path>           добавляет строку `# Autogenerated line` в конец `path`\n" +
                        "bc <path>               создает копию `path` в директорию `/tmp/${date}.backup` где, date - это дата в формате `dd-mm-yyyy`\n" +
                        "greplong <path>         выводит самое длинное слово в файле\n" +
                        "help                    выводит список команд и их описание\n" +
                        "exit                    завершает работу программы");
    }

    // завершает работу программы - exit
    public static void exit() {
        flag = false;
    }
}
